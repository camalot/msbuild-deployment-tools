//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool but it was edited by a non-tool.
//     Runtime Version:2.0.50727.3053
// </auto-generated>
//------------------------------------------------------------------------------

using System;
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute ( "http://www.codeplex.com/services/ReleaseService/v1.0", ClrNamespace = "com.codeplex.services" )]

namespace com.codeplex.services {
	using System.Runtime.Serialization;

	/// <summary>
	/// 
	/// </summary>
	[System.Diagnostics.DebuggerStepThroughAttribute ( )]
	[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.Runtime.Serialization", "3.0.0.0" )]
	[System.Runtime.Serialization.DataContractAttribute ( Name = "ReleaseFile", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0" )]
	internal partial class ReleaseFile : object, System.Runtime.Serialization.IExtensibleDataObject {

		/// <summary>
		/// Gets or sets the extension data.
		/// </summary>
		/// <value>The extension data.</value>
		public System.Runtime.Serialization.ExtensionDataObject ExtensionData { get; set; }

		/// <summary>
		/// Gets or sets the file data.
		/// </summary>
		/// <value>The file data.</value>
		[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false )]
		internal byte[] FileData { get; set; }

		/// <summary>
		/// Gets or sets the name of the file.
		/// </summary>
		/// <value>The name of the file.</value>
		[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false )]
		internal string FileName { get; set; }

		/// <summary>
		/// Gets or sets the type of the file.
		/// </summary>
		/// <value>The type of the file.</value>
		[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false )]
		internal string FileType { get; set; }

		/// <summary>
		/// Gets or sets the type of the MIME.
		/// </summary>
		/// <value>The type of the MIME.</value>
		[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false )]
		internal string MimeType { get; set; }

		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		/// <value>The name.</value>
		[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false )]
		internal string Name { get; set; }
	}
}


/// <summary>
/// 
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.ServiceContractAttribute ( Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", ConfigurationName = "ReleaseServiceSoap" )]
internal interface ReleaseServiceSoap {

	// CODEGEN: Generating message contract since element name projectName from namespace http://www.codeplex.com/services/ReleaseService/v1.0 is not marked nillable
	/// <summary>
	/// Creates the A release.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( Action = "http://www.codeplex.com/services/ReleaseService/v1.0/CreateARelease", ReplyAction = "*" )]
	CreateReleaseResponse CreateRelease ( CreateReleaseRequest request );

	/// <summary>
	/// Begins the create A release.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( AsyncPattern = true, Action = "http://www.codeplex.com/services/ReleaseService/v1.0/CreateARelease", ReplyAction = "*" )]
	System.IAsyncResult BeginCreateRelease ( CreateReleaseRequest request, System.AsyncCallback callback, object asyncState );

	/// <summary>
	/// Ends the create A release.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	CreateReleaseResponse EndCreateRelease ( System.IAsyncResult result );

	// CODEGEN: Generating message contract since element name projectName from namespace http://www.codeplex.com/services/ReleaseService/v1.0 is not marked nillable
	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( Action = "http://www.codeplex.com/services/ReleaseService/v1.0/UploadReleaseFiles", ReplyAction = "*" )]
	UploadReleaseFilesResponse UploadReleaseFiles ( UploadReleaseFilesRequest request );

	/// <summary>
	/// Begins the upload release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( AsyncPattern = true, Action = "http://www.codeplex.com/services/ReleaseService/v1.0/UploadReleaseFiles", ReplyAction = "*" )]
	System.IAsyncResult BeginUploadReleaseFiles ( UploadReleaseFilesRequest request, System.AsyncCallback callback, object asyncState );

	/// <summary>
	/// Ends the upload release files.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	UploadReleaseFilesResponse EndUploadReleaseFiles ( System.IAsyncResult result );

	// CODEGEN: Generating message contract since element name projectName from namespace http://www.codeplex.com/services/ReleaseService/v1.0 is not marked nillable
	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( Action = "http://www.codeplex.com/services/ReleaseService/v1.0/UploadTheReleaseFiles", ReplyAction = "*" )]
	UploadTheReleaseFilesResponse UploadTheReleaseFiles ( UploadTheReleaseFilesRequest request );

	/// <summary>
	/// Begins the upload the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ServiceModel.OperationContractAttribute ( AsyncPattern = true, Action = "http://www.codeplex.com/services/ReleaseService/v1.0/UploadTheReleaseFiles", ReplyAction = "*" )]
	System.IAsyncResult BeginUploadTheReleaseFiles ( UploadTheReleaseFilesRequest request, System.AsyncCallback callback, object asyncState );

	/// <summary>
	/// Ends the upload the release files.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	UploadTheReleaseFilesResponse EndUploadTheReleaseFiles ( System.IAsyncResult result );
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class CreateReleaseRequest {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "CreateARelease", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public CreateReleaseRequestBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseRequest"/> class.
	/// </summary>
	public CreateReleaseRequest ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseRequest"/> class.
	/// </summary>
	/// <param name="Body">The body.</param>
	public CreateReleaseRequest ( CreateReleaseRequestBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0" )]
internal partial class CreateReleaseRequestBody {

	/// <summary>
	/// Gets or sets the name of the project.
	/// </summary>
	/// <value>The name of the project.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 0 )]
	public string ProjectName { get; set; }

	/// <summary>
	/// Gets or sets the name.
	/// </summary>
	/// <value>The name.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 1 )]
	public string Name { get; set; }

	/// <summary>
	/// Gets or sets the description.
	/// </summary>
	/// <value>The description.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 2 )]
	public string Description { get; set; }

	/// <summary>
	/// Gets or sets the release date.
	/// </summary>
	/// <value>The release date.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 3 )]
	public string ReleaseDate { get; set; }

	/// <summary>
	/// Gets or sets the status.
	/// </summary>
	/// <value>The status.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 4 )]
	public string Status { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether [show to public].
	/// </summary>
	/// <value><c>true</c> if [show to public]; otherwise, <c>false</c>.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( Order = 5 )]
	public bool ShowToPublic { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether this instance is default release.
	/// </summary>
	/// <value>
	/// 	<c>true</c> if this instance is default release; otherwise, <c>false</c>.
	/// </value>
	[System.Runtime.Serialization.DataMemberAttribute ( Order = 6 )]
	public bool IsDefaultRelease { get; set; }

	/// <summary>
	/// Gets or sets the username.
	/// </summary>
	/// <value>The username.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 7 )]
	public string Username { get; set; }

	/// <summary>
	/// Gets or sets the password.
	/// </summary>
	/// <value>The password.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 8 )]
	public string Password { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseRequestBody"/> class.
	/// </summary>
	public CreateReleaseRequestBody ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseRequestBody"/> class.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="name">The name.</param>
	/// <param name="description">The description.</param>
	/// <param name="releaseDate">The release date.</param>
	/// <param name="status">The status.</param>
	/// <param name="showToPublic">if set to <c>true</c> [show to public].</param>
	/// <param name="isDefaultRelease">if set to <c>true</c> [is default release].</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public CreateReleaseRequestBody ( string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password ) {
		this.ProjectName = projectName;
		this.Name = name;
		this.Description = description;
		this.ReleaseDate = releaseDate;
		this.Status = status;
		this.ShowToPublic = showToPublic;
		this.IsDefaultRelease = isDefaultRelease;
		this.Username = username;
		this.Password = password;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class CreateReleaseResponse {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "CreateAReleaseResponse", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public CreateReleaseResponseBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseResponse"/> class.
	/// </summary>
	public CreateReleaseResponse ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseResponse"/> class.
	/// </summary>
	/// <param name="Body">The body.</param>
	public CreateReleaseResponse ( CreateReleaseResponseBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0" )]
internal partial class CreateReleaseResponseBody {

	/// <summary>
	/// Gets or sets the create A release result.
	/// </summary>
	/// <value>The create A release result.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( Order = 0 )]
	public int CreateReleaseResult { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseResponseBody"/> class.
	/// </summary>
	public CreateReleaseResponseBody ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseResponseBody"/> class.
	/// </summary>
	/// <param name="CreateReleaseResult">The create A release result.</param>
	public CreateReleaseResponseBody ( int createAReleaseResult ) {
		this.CreateReleaseResult = createAReleaseResult;
	}
}



/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class UploadReleaseFilesRequest {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "UploadReleaseFiles", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public UploadReleaseFilesRequestBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesRequest"/> class.
	/// </summary>
	public UploadReleaseFilesRequest ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesRequest"/> class.
	/// </summary>
	/// <param name="body">The body.</param>
	public UploadReleaseFilesRequest ( UploadReleaseFilesRequestBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0" )]
internal partial class UploadReleaseFilesRequestBody {

	/// <summary>
	/// Gets or sets the name of the project.
	/// </summary>
	/// <value>The name of the project.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 0 )]
	public string ProjectName { get; set; }

	/// <summary>
	/// Gets or sets the name of the release.
	/// </summary>
	/// <value>The name of the release.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 1 )]
	public string ReleaseName { get; set; }

	/// <summary>
	/// Gets or sets the files.
	/// </summary>
	/// <value>The files.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 2 )]
	public System.Collections.Generic.List<com.codeplex.services.ReleaseFile> Files { get; set; }

	/// <summary>
	/// Gets or sets the username.
	/// </summary>
	/// <value>The username.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 3 )]
	public string Username { get; set; }

	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 4 )]
	public string Password;

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesRequestBody"/> class.
	/// </summary>
	public UploadReleaseFilesRequestBody ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesRequestBody"/> class.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public UploadReleaseFilesRequestBody ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string username, string password ) {
		this.ProjectName = projectName;
		this.ReleaseName = releaseName;
		this.Files = files;
		this.Username = username;
		this.Password = password;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class UploadReleaseFilesResponse {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "UploadReleaseFilesResponse", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public UploadReleaseFilesResponseBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesResponse"/> class.
	/// </summary>
	public UploadReleaseFilesResponse ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesResponse"/> class.
	/// </summary>
	/// <param name="body">The body.</param>
	public UploadReleaseFilesResponse ( UploadReleaseFilesResponseBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( )]
internal partial class UploadReleaseFilesResponseBody {

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadReleaseFilesResponseBody"/> class.
	/// </summary>
	public UploadReleaseFilesResponseBody ( ) {
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class UploadTheReleaseFilesRequest {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "UploadTheReleaseFiles", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public UploadTheReleaseFilesRequestBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesRequest"/> class.
	/// </summary>
	public UploadTheReleaseFilesRequest ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesRequest"/> class.
	/// </summary>
	/// <param name="body">The body.</param>
	public UploadTheReleaseFilesRequest ( UploadTheReleaseFilesRequestBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0" )]
internal partial class UploadTheReleaseFilesRequestBody {

	/// <summary>
	/// Gets or sets the name of the project.
	/// </summary>
	/// <value>The name of the project.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 0 )]
	public string ProjectName { get; set; }

	/// <summary>
	/// Gets or sets the name of the release.
	/// </summary>
	/// <value>The name of the release.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 1 )]
	public string ReleaseName { get; set; }

	/// <summary>
	/// Gets or sets the files.
	/// </summary>
	/// <value>The files.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 2 )]
	public System.Collections.Generic.List<com.codeplex.services.ReleaseFile> Files { get; set; }

	/// <summary>
	/// Gets or sets the name of the recommended file.
	/// </summary>
	/// <value>The name of the recommended file.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 3 )]
	public string RecommendedFileName { get; set; }

	/// <summary>
	/// Gets or sets the username.
	/// </summary>
	/// <value>The username.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 4 )]
	public string Username { get; set; }

	/// <summary>
	/// Gets or sets the password.
	/// </summary>
	/// <value>The password.</value>
	[System.Runtime.Serialization.DataMemberAttribute ( EmitDefaultValue = false, Order = 5 )]
	public string Password { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesRequestBody"/> class.
	/// </summary>
	public UploadTheReleaseFilesRequestBody ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesRequestBody"/> class.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="recommendedFileName">Name of the recommended file.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public UploadTheReleaseFilesRequestBody ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string recommendedFileName, string username, string password ) {
		this.ProjectName = projectName;
		this.ReleaseName = releaseName;
		this.Files = files;
		this.RecommendedFileName = recommendedFileName;
		this.Username = username;
		this.Password = password;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.ServiceModel.MessageContractAttribute ( IsWrapped = false )]
internal partial class UploadTheReleaseFilesResponse {

	/// <summary>
	/// Gets or sets the body.
	/// </summary>
	/// <value>The body.</value>
	[System.ServiceModel.MessageBodyMemberAttribute ( Name = "UploadTheReleaseFilesResponse", Namespace = "http://www.codeplex.com/services/ReleaseService/v1.0", Order = 0 )]
	public UploadTheReleaseFilesResponseBody Body { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesResponse"/> class.
	/// </summary>
	public UploadTheReleaseFilesResponse ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesResponse"/> class.
	/// </summary>
	/// <param name="body">The body.</param>
	public UploadTheReleaseFilesResponse ( UploadTheReleaseFilesResponseBody body ) {
		this.Body = body;
	}
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
[System.Runtime.Serialization.DataContractAttribute ( )]
internal partial class UploadTheReleaseFilesResponseBody {

	/// <summary>
	/// Initializes a new instance of the <see cref="UploadTheReleaseFilesResponseBody"/> class.
	/// </summary>
	public UploadTheReleaseFilesResponseBody ( ) {
	}
}

/// <summary>
/// 
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
internal interface ReleaseServiceSoapChannel : ReleaseServiceSoap, System.ServiceModel.IClientChannel {
}

/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
internal partial class CreateReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

	private object[] results;

	/// <summary>
	/// Initializes a new instance of the <see cref="CreateReleaseCompletedEventArgs"/> class.
	/// </summary>
	/// <param name="results">The results.</param>
	/// <param name="exception">The exception.</param>
	/// <param name="cancelled">if set to <c>true</c> [cancelled].</param>
	/// <param name="userState">State of the user.</param>
	public CreateReleaseCompletedEventArgs ( object[] results, System.Exception exception, bool cancelled, object userState ) :
		base ( exception, cancelled, userState ) {
		this.results = results;
	}

	/// <summary>
	/// Gets the result.
	/// </summary>
	/// <value>The result.</value>
	public int Result {
		get {
			base.RaiseExceptionIfNecessary ( );
			return ( (int)( this.results[ 0 ] ) );
		}
	}
}


/// <summary>
/// 
/// </summary>
[System.Diagnostics.DebuggerStepThroughAttribute ( )]
[System.CodeDom.Compiler.GeneratedCodeAttribute ( "System.ServiceModel", "3.0.0.0" )]
internal partial class ReleaseServiceSoapClient : System.ServiceModel.ClientBase<ReleaseServiceSoap>, ReleaseServiceSoap {

	/// <summary>
	/// 
	/// </summary>
	private BeginOperationDelegate onBeginCreateReleaseDelegate;

	private EndOperationDelegate onEndCreateReleaseDelegate;

	private System.Threading.SendOrPostCallback onCreateReleaseCompletedDelegate;

	private BeginOperationDelegate onBeginUploadReleaseFilesDelegate;

	private EndOperationDelegate onEndUploadReleaseFilesDelegate;

	private System.Threading.SendOrPostCallback onUploadReleaseFilesCompletedDelegate;

	private BeginOperationDelegate onBeginUploadTheReleaseFilesDelegate;

	private EndOperationDelegate onEndUploadTheReleaseFilesDelegate;

	private System.Threading.SendOrPostCallback onUploadTheReleaseFilesCompletedDelegate;

	/// <summary>
	/// Initializes a new instance of the <see cref="ReleaseServiceSoapClient"/> class.
	/// </summary>
	public ReleaseServiceSoapClient ( ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="ReleaseServiceSoapClient"/> class.
	/// </summary>
	/// <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
	public ReleaseServiceSoapClient ( string endpointConfigurationName ) :
		base ( endpointConfigurationName ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="ReleaseServiceSoapClient"/> class.
	/// </summary>
	/// <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
	/// <param name="remoteAddress">The remote address.</param>
	public ReleaseServiceSoapClient ( string endpointConfigurationName, string remoteAddress ) :
		base ( endpointConfigurationName, remoteAddress ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="ReleaseServiceSoapClient"/> class.
	/// </summary>
	/// <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
	/// <param name="remoteAddress">The remote address.</param>
	public ReleaseServiceSoapClient ( string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress ) :
		base ( endpointConfigurationName, remoteAddress ) {
	}

	/// <summary>
	/// Initializes a new instance of the <see cref="ReleaseServiceSoapClient"/> class.
	/// </summary>
	/// <param name="binding">The binding.</param>
	/// <param name="remoteAddress">The remote address.</param>
	public ReleaseServiceSoapClient ( System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress ) :
		base ( binding, remoteAddress ) {
	}

	/// <summary>
	/// Occurs when [create A release completed].
	/// </summary>
	public event System.EventHandler<CreateReleaseCompletedEventArgs> CreateReleaseCompleted;

	/// <summary>
	/// Occurs when [upload release files completed].
	/// </summary>
	public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadReleaseFilesCompleted;

	/// <summary>
	/// Occurs when [upload the release files completed].
	/// </summary>
	public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadTheReleaseFilesCompleted;

	/// <summary>
	/// Creates the A release.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	CreateReleaseResponse ReleaseServiceSoap.CreateRelease ( CreateReleaseRequest request ) {
		return base.Channel.CreateRelease ( request );
	}

	/// <summary>
	/// Creates the A release.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="name">The name.</param>
	/// <param name="description">The description.</param>
	/// <param name="releaseDate">The release date.</param>
	/// <param name="status">The status.</param>
	/// <param name="showToPublic">if set to <c>true</c> [show to public].</param>
	/// <param name="isDefaultRelease">if set to <c>true</c> [is default release].</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <returns></returns>
	public int CreateRelease ( string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password ) {
		CreateReleaseRequest inValue = new CreateReleaseRequest ( );
		inValue.Body = new CreateReleaseRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.Name = name;
		inValue.Body.Description = description;
		inValue.Body.ReleaseDate = releaseDate;
		inValue.Body.Status = status;
		inValue.Body.ShowToPublic = showToPublic;
		inValue.Body.IsDefaultRelease = isDefaultRelease;
		inValue.Body.Username = username;
		Console.WriteLine ( "Username: {0}", inValue.Body.Username );
		inValue.Body.Password = password;
		CreateReleaseResponse retVal = ( (ReleaseServiceSoap)( this ) ).CreateRelease ( inValue );
		return retVal.Body.CreateReleaseResult;
	}

	/// <summary>
	/// Begins the create A release.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	System.IAsyncResult ReleaseServiceSoap.BeginCreateRelease ( CreateReleaseRequest request, System.AsyncCallback callback, object asyncState ) {
		return base.Channel.BeginCreateRelease ( request, callback, asyncState );
	}

	/// <summary>
	/// Begins the create A release.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="name">The name.</param>
	/// <param name="description">The description.</param>
	/// <param name="releaseDate">The release date.</param>
	/// <param name="status">The status.</param>
	/// <param name="showToPublic">if set to <c>true</c> [show to public].</param>
	/// <param name="isDefaultRelease">if set to <c>true</c> [is default release].</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public System.IAsyncResult BeginCreateRelease ( string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, System.AsyncCallback callback, object asyncState ) {
		CreateReleaseRequest inValue = new CreateReleaseRequest ( );
		inValue.Body = new CreateReleaseRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.Name = name;
		inValue.Body.Description = description;
		inValue.Body.ReleaseDate = releaseDate;
		inValue.Body.Status = status;
		inValue.Body.ShowToPublic = showToPublic;
		inValue.Body.IsDefaultRelease = isDefaultRelease;
		inValue.Body.Username = username;
		inValue.Body.Password = password;
		return ( (ReleaseServiceSoap)( this ) ).BeginCreateRelease ( inValue, callback, asyncState );
	}

	/// <summary>
	/// Ends the create A release.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	CreateReleaseResponse ReleaseServiceSoap.EndCreateRelease ( System.IAsyncResult result ) {
		return base.Channel.EndCreateRelease ( result );
	}

	/// <summary>
	/// Ends the create A release.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public int EndCreateRelease ( System.IAsyncResult result ) {
		CreateReleaseResponse retVal = ( (ReleaseServiceSoap)( this ) ).EndCreateRelease ( result );
		return retVal.Body.CreateReleaseResult;
	}

	/// <summary>
	/// Called when [begin create A release].
	/// </summary>
	/// <param name="inValues">The in values.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	private System.IAsyncResult OnBeginCreateRelease ( object[] inValues, System.AsyncCallback callback, object asyncState ) {
		string projectName = ( (string)( inValues[ 0 ] ) );
		string name = ( (string)( inValues[ 1 ] ) );
		string description = ( (string)( inValues[ 2 ] ) );
		string releaseDate = ( (string)( inValues[ 3 ] ) );
		string status = ( (string)( inValues[ 4 ] ) );
		bool showToPublic = ( (bool)( inValues[ 5 ] ) );
		bool isDefaultRelease = ( (bool)( inValues[ 6 ] ) );
		string username = ( (string)( inValues[ 7 ] ) );
		string password = ( (string)( inValues[ 8 ] ) );
		return this.BeginCreateRelease ( projectName, name, description, releaseDate, status, showToPublic, isDefaultRelease, username, password, callback, asyncState );
	}

	/// <summary>
	/// Called when [end create A release].
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	private object[] OnEndCreateRelease ( System.IAsyncResult result ) {
		int retVal = this.EndCreateRelease ( result );
		return new object[] {
                retVal};
	}

	/// <summary>
	/// Called when [create A release completed].
	/// </summary>
	/// <param name="state">The state.</param>
	private void OnCreateReleaseCompleted ( object state ) {
		if ( ( this.CreateReleaseCompleted != null ) ) {
			InvokeAsyncCompletedEventArgs e = ( (InvokeAsyncCompletedEventArgs)( state ) );
			this.CreateReleaseCompleted ( this, new CreateReleaseCompletedEventArgs ( e.Results, e.Error, e.Cancelled, e.UserState ) );
		}
	}

	/// <summary>
	/// Creates the A release async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="name">The name.</param>
	/// <param name="description">The description.</param>
	/// <param name="releaseDate">The release date.</param>
	/// <param name="status">The status.</param>
	/// <param name="showToPublic">if set to <c>true</c> [show to public].</param>
	/// <param name="isDefaultRelease">if set to <c>true</c> [is default release].</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public void CreateReleaseAsync ( string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password ) {
		this.CreateReleaseAsync ( projectName, name, description, releaseDate, status, showToPublic, isDefaultRelease, username, password, null );
	}

	/// <summary>
	/// Creates the A release async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="name">The name.</param>
	/// <param name="description">The description.</param>
	/// <param name="releaseDate">The release date.</param>
	/// <param name="status">The status.</param>
	/// <param name="showToPublic">if set to <c>true</c> [show to public].</param>
	/// <param name="isDefaultRelease">if set to <c>true</c> [is default release].</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="userState">State of the user.</param>
	public void CreateReleaseAsync ( string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, object userState ) {
		if ( ( this.onBeginCreateReleaseDelegate == null ) ) {
			this.onBeginCreateReleaseDelegate = new BeginOperationDelegate ( this.OnBeginCreateRelease );
		}
		if ( ( this.onEndCreateReleaseDelegate == null ) ) {
			this.onEndCreateReleaseDelegate = new EndOperationDelegate ( this.OnEndCreateRelease );
		}
		if ( ( this.onCreateReleaseCompletedDelegate == null ) ) {
			this.onCreateReleaseCompletedDelegate = new System.Threading.SendOrPostCallback ( this.OnCreateReleaseCompleted );
		}
		base.InvokeAsync ( this.onBeginCreateReleaseDelegate, new object[] {
                    projectName,
                    name,
                    description,
                    releaseDate,
                    status,
                    showToPublic,
                    isDefaultRelease,
                    username,
                    password}, this.onEndCreateReleaseDelegate, this.onCreateReleaseCompletedDelegate, userState );
	}

	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	UploadReleaseFilesResponse ReleaseServiceSoap.UploadReleaseFiles ( UploadReleaseFilesRequest request ) {
		return base.Channel.UploadReleaseFiles ( request );
	}

	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public void UploadReleaseFiles ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string username, string password ) {
		UploadReleaseFilesRequest inValue = new UploadReleaseFilesRequest ( );
		inValue.Body = new UploadReleaseFilesRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.ReleaseName = releaseName;
		inValue.Body.Files = files;
		inValue.Body.Username = username;
		inValue.Body.Password = password;
		UploadReleaseFilesResponse retVal = ( (ReleaseServiceSoap)( this ) ).UploadReleaseFiles ( inValue );
	}

	/// <summary>
	/// Begins the upload release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	System.IAsyncResult ReleaseServiceSoap.BeginUploadReleaseFiles ( UploadReleaseFilesRequest request, System.AsyncCallback callback, object asyncState ) {
		return base.Channel.BeginUploadReleaseFiles ( request, callback, asyncState );
	}

	/// <summary>
	/// Begins the upload release files.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public System.IAsyncResult BeginUploadReleaseFiles ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string username, string password, System.AsyncCallback callback, object asyncState ) {
		UploadReleaseFilesRequest inValue = new UploadReleaseFilesRequest ( );
		inValue.Body = new UploadReleaseFilesRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.ReleaseName = releaseName;
		inValue.Body.Files = files;
		inValue.Body.Username = username;
		inValue.Body.Password = password;
		return ( (ReleaseServiceSoap)( this ) ).BeginUploadReleaseFiles ( inValue, callback, asyncState );
	}

	/// <summary>
	/// Ends the upload release files.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	UploadReleaseFilesResponse ReleaseServiceSoap.EndUploadReleaseFiles ( System.IAsyncResult result ) {
		return base.Channel.EndUploadReleaseFiles ( result );
	}

	/// <summary>
	/// Ends the upload release files.
	/// </summary>
	/// <param name="result">The result.</param>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public void EndUploadReleaseFiles ( System.IAsyncResult result ) {
		UploadReleaseFilesResponse retVal = ( (ReleaseServiceSoap)( this ) ).EndUploadReleaseFiles ( result );
	}

	/// <summary>
	/// Called when [begin upload release files].
	/// </summary>
	/// <param name="inValues">The in values.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	private System.IAsyncResult OnBeginUploadReleaseFiles ( object[] inValues, System.AsyncCallback callback, object asyncState ) {
		string projectName = ( (string)( inValues[ 0 ] ) );
		string releaseName = ( (string)( inValues[ 1 ] ) );
		System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files = ( (System.Collections.Generic.List<com.codeplex.services.ReleaseFile>)( inValues[ 2 ] ) );
		string username = ( (string)( inValues[ 3 ] ) );
		string password = ( (string)( inValues[ 4 ] ) );
		return this.BeginUploadReleaseFiles ( projectName, releaseName, files, username, password, callback, asyncState );
	}

	/// <summary>
	/// Called when [end upload release files].
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	private object[] OnEndUploadReleaseFiles ( System.IAsyncResult result ) {
		this.EndUploadReleaseFiles ( result );
		return null;
	}

	/// <summary>
	/// Called when [upload release files completed].
	/// </summary>
	/// <param name="state">The state.</param>
	private void OnUploadReleaseFilesCompleted ( object state ) {
		if ( ( this.UploadReleaseFilesCompleted != null ) ) {
			InvokeAsyncCompletedEventArgs e = ( (InvokeAsyncCompletedEventArgs)( state ) );
			this.UploadReleaseFilesCompleted ( this, new System.ComponentModel.AsyncCompletedEventArgs ( e.Error, e.Cancelled, e.UserState ) );
		}
	}

	/// <summary>
	/// Uploads the release files async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public void UploadReleaseFilesAsync ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string username, string password ) {
		this.UploadReleaseFilesAsync ( projectName, releaseName, files, username, password, null );
	}

	/// <summary>
	/// Uploads the release files async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="userState">State of the user.</param>
	public void UploadReleaseFilesAsync ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string username, string password, object userState ) {
		if ( ( this.onBeginUploadReleaseFilesDelegate == null ) ) {
			this.onBeginUploadReleaseFilesDelegate = new BeginOperationDelegate ( this.OnBeginUploadReleaseFiles );
		}
		if ( ( this.onEndUploadReleaseFilesDelegate == null ) ) {
			this.onEndUploadReleaseFilesDelegate = new EndOperationDelegate ( this.OnEndUploadReleaseFiles );
		}
		if ( ( this.onUploadReleaseFilesCompletedDelegate == null ) ) {
			this.onUploadReleaseFilesCompletedDelegate = new System.Threading.SendOrPostCallback ( this.OnUploadReleaseFilesCompleted );
		}
		base.InvokeAsync ( this.onBeginUploadReleaseFilesDelegate, new object[] {
                    projectName,
                    releaseName,
                    files,
                    username,
                    password}, this.onEndUploadReleaseFilesDelegate, this.onUploadReleaseFilesCompletedDelegate, userState );
	}

	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	UploadTheReleaseFilesResponse ReleaseServiceSoap.UploadTheReleaseFiles ( UploadTheReleaseFilesRequest request ) {
		return base.Channel.UploadTheReleaseFiles ( request );
	}

	/// <summary>
	/// Uploads the release files.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="recommendedFileName">Name of the recommended file.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public void UploadTheReleaseFiles ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string recommendedFileName, string username, string password ) {
		UploadTheReleaseFilesRequest inValue = new UploadTheReleaseFilesRequest ( );
		inValue.Body = new UploadTheReleaseFilesRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.ReleaseName = releaseName;
		inValue.Body.Files = files;
		inValue.Body.RecommendedFileName = recommendedFileName;
		inValue.Body.Username = username;
		inValue.Body.Password = password;
		UploadTheReleaseFilesResponse retVal = ( (ReleaseServiceSoap)( this ) ).UploadTheReleaseFiles ( inValue );
	}

	/// <summary>
	/// Begins the upload the release files.
	/// </summary>
	/// <param name="request">The request.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	System.IAsyncResult ReleaseServiceSoap.BeginUploadTheReleaseFiles ( UploadTheReleaseFilesRequest request, System.AsyncCallback callback, object asyncState ) {
		return base.Channel.BeginUploadTheReleaseFiles ( request, callback, asyncState );
	}

	/// <summary>
	/// Begins the upload the release files.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="recommendedFileName">Name of the recommended file.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public System.IAsyncResult BeginUploadTheReleaseFiles ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string recommendedFileName, string username, string password, System.AsyncCallback callback, object asyncState ) {
		UploadTheReleaseFilesRequest inValue = new UploadTheReleaseFilesRequest ( );
		inValue.Body = new UploadTheReleaseFilesRequestBody ( );
		inValue.Body.ProjectName = projectName;
		inValue.Body.ReleaseName = releaseName;
		inValue.Body.Files = files;
		inValue.Body.RecommendedFileName = recommendedFileName;
		inValue.Body.Username = username;
		inValue.Body.Password = password;
		return ( (ReleaseServiceSoap)( this ) ).BeginUploadTheReleaseFiles ( inValue, callback, asyncState );
	}

	/// <summary>
	/// Ends the upload the release files.
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	UploadTheReleaseFilesResponse ReleaseServiceSoap.EndUploadTheReleaseFiles ( System.IAsyncResult result ) {
		return base.Channel.EndUploadTheReleaseFiles ( result );
	}

	/// <summary>
	/// Ends the upload the release files.
	/// </summary>
	/// <param name="result">The result.</param>
	[System.ComponentModel.EditorBrowsableAttribute ( System.ComponentModel.EditorBrowsableState.Advanced )]
	public void EndUploadTheReleaseFiles ( System.IAsyncResult result ) {
		UploadTheReleaseFilesResponse retVal = ( (ReleaseServiceSoap)( this ) ).EndUploadTheReleaseFiles ( result );
	}

	/// <summary>
	/// Called when [begin upload the release files].
	/// </summary>
	/// <param name="inValues">The in values.</param>
	/// <param name="callback">The callback.</param>
	/// <param name="asyncState">State of the async.</param>
	/// <returns></returns>
	private System.IAsyncResult OnBeginUploadTheReleaseFiles ( object[] inValues, System.AsyncCallback callback, object asyncState ) {
		string projectName = ( (string)( inValues[ 0 ] ) );
		string releaseName = ( (string)( inValues[ 1 ] ) );
		System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files = ( (System.Collections.Generic.List<com.codeplex.services.ReleaseFile>)( inValues[ 2 ] ) );
		string recommendedFileName = ( (string)( inValues[ 3 ] ) );
		string username = ( (string)( inValues[ 4 ] ) );
		string password = ( (string)( inValues[ 5 ] ) );
		return this.BeginUploadTheReleaseFiles ( projectName, releaseName, files, recommendedFileName, username, password, callback, asyncState );
	}

	/// <summary>
	/// Called when [end upload the release files].
	/// </summary>
	/// <param name="result">The result.</param>
	/// <returns></returns>
	private object[] OnEndUploadTheReleaseFiles ( System.IAsyncResult result ) {
		this.EndUploadTheReleaseFiles ( result );
		return null;
	}

	/// <summary>
	/// Called when [upload the release files completed].
	/// </summary>
	/// <param name="state">The state.</param>
	private void OnUploadTheReleaseFilesCompleted ( object state ) {
		if ( ( this.UploadTheReleaseFilesCompleted != null ) ) {
			InvokeAsyncCompletedEventArgs e = ( (InvokeAsyncCompletedEventArgs)( state ) );
			this.UploadTheReleaseFilesCompleted ( this, new System.ComponentModel.AsyncCompletedEventArgs ( e.Error, e.Cancelled, e.UserState ) );
		}
	}

	/// <summary>
	/// Uploads the release files async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="recommendedFileName">Name of the recommended file.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	public void UploadTheReleaseFilesAsync ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string recommendedFileName, string username, string password ) {
		this.UploadTheReleaseFilesAsync ( projectName, releaseName, files, recommendedFileName, username, password, null );
	}

	/// <summary>
	/// Uploads the release files async.
	/// </summary>
	/// <param name="projectName">Name of the project.</param>
	/// <param name="releaseName">Name of the release.</param>
	/// <param name="files">The files.</param>
	/// <param name="recommendedFileName">Name of the recommended file.</param>
	/// <param name="username">The username.</param>
	/// <param name="password">The password.</param>
	/// <param name="userState">State of the user.</param>
	public void UploadTheReleaseFilesAsync ( string projectName, string releaseName, System.Collections.Generic.List<com.codeplex.services.ReleaseFile> files, string recommendedFileName, string username, string password, object userState ) {
		if ( ( this.onBeginUploadTheReleaseFilesDelegate == null ) ) {
			this.onBeginUploadTheReleaseFilesDelegate = new BeginOperationDelegate ( this.OnBeginUploadTheReleaseFiles );
		}
		if ( ( this.onEndUploadTheReleaseFilesDelegate == null ) ) {
			this.onEndUploadTheReleaseFilesDelegate = new EndOperationDelegate ( this.OnEndUploadTheReleaseFiles );
		}
		if ( ( this.onUploadTheReleaseFilesCompletedDelegate == null ) ) {
			this.onUploadTheReleaseFilesCompletedDelegate = new System.Threading.SendOrPostCallback ( this.OnUploadTheReleaseFilesCompleted );
		}
		base.InvokeAsync ( this.onBeginUploadTheReleaseFilesDelegate, new object[] {
                    projectName,
                    releaseName,
                    files,
                    recommendedFileName,
                    username,
                    password}, this.onEndUploadTheReleaseFilesDelegate, this.onUploadTheReleaseFilesCompletedDelegate, userState );
	}
}
